//============INTEGRATION CREATE EVENT============
module.exports = {
    name: 'interactionCreate',
    async execute(interaction, client){
        const { EmbedBuilder, ActionRowBuilder, ButtonBuilder, ButtonStyle, ChannelType, PermissionsBitField } = require('discord.js')
        const { Modal, TextInputComponent, showModal } = require('discord-modals')
        var conf = client.config
          function sendCmd(cmd){
            const time = new Date()
            var str = mc.runcmdEx(cmd)
            console.log('\x1b[1m\x1b[33m'+time+' \x1b[37m| \x1b[32mINFO \x1b[37m| \x1b[36m–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –∫–æ–º–∞–Ω–¥–∞ > \x1b[33m'+cmd+'\x1b[0m')
            console.log('\x1b[1m\x1b[33m'+time+' \x1b[37m| \x1b[32mINFO \x1b[37m| \x1b[36m–û—Ç–≤–µ—Ç > \x1b[33m'+str.output+'\x1b[0m')
          }
        if (!interaction.isButton()) return
        if (interaction.customId == "requestEmbed"){
            if (client.guilds.cache.get(interaction.guildId).channels.cache.find(c => c.topic == interaction.user.id+'-wl')){
                return interaction.reply({
                    content: '–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∑–∞—è–≤–∫–∞!',
                    ephemeral: true
                })
            }
            interaction.guild.channels.create({
                name: '–∑–∞—è–≤–∫–∞-'+interaction.user.username,
                topic: interaction.user.id+'-wl',
                parent: conf.requestParent,
                type: ChannelType.GuildText,
                permissionOverwrites: [
                {
                    id: interaction.user.id,
                    allow: [PermissionsBitField.Flags.SendMessages, PermissionsBitField.Flags.ViewChannel],
                },
                {
                    id: conf.adminRole,
                    allow: [PermissionsBitField.Flags.SendMessages, PermissionsBitField.Flags.ViewChannel],
                },
                {
                    id: interaction.guild.roles.everyone,
                    deny: [PermissionsBitField.Flags.ViewChannel],
                }],
            }).then(async c => {
                const sendChannel = client.channels.cache.get(c.id)
                interaction.reply({
                    content: `–ó–∞—è–≤–∫–∞ —Å–æ–∑–¥–∞–Ω–∞! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –∞–Ω–∫–µ—Ç—É! <#${c.id}>`,
                    ephemeral: true
                })
                const embed = new EmbedBuilder()
                .setColor('#00bd6d')
                .setAuthor(
                    {
                        name: '–ó–∞—è–≤–∫–∞ –°–æ–∑–¥–∞–Ω–∞'
                    })
                .setDescription('**–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –∑–∞–ø–æ–ª–Ω–∏—Ç—å –∞–Ω–∫–µ—Ç—É –¥–ª—è –≤—Ö–æ–¥–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä!**')
                .setThumbnail(conf.thumbImage)
                .setFooter(
                    {
                        text: conf.footerText
                    })
                const row = new ActionRowBuilder()
                .addComponents(
                    new ButtonBuilder()
                        .setCustomId('requestChanEmbed')
                        .setLabel('–ó–∞–ø–æ–ª–Ω–∏—Ç—å –ê–Ω–∫–µ—Ç—É')
                        .setEmoji('üí´')
                        .setStyle(ButtonStyle.Success)
                        )
                    sendChannel.send(
                        {
                            embeds: [embed],
                            components: [row]
                        }
                    )
                }
            ).catch(e =>{console.log(e)})
        }
        const reqModal = new Modal()
        .setCustomId('requestModal')
        .setTitle('–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –ê–Ω–∫–µ—Ç—É')
        .addComponents(
            new TextInputComponent()
            .setCustomId('input1')
            .setLabel(conf.WhiteList.Question1.Label)
            .setPlaceholder(conf.WhiteList.Question1.Placeholder)
            .setStyle(conf.WhiteList.Question1.Style)
            .setRequired(true),
            new TextInputComponent()
            .setCustomId('input2')
            .setLabel(conf.WhiteList.Question2.Label)
            .setPlaceholder(conf.WhiteList.Question2.Placeholder)
            .setStyle(conf.WhiteList.Question2.Style)
            .setRequired(true),
            new TextInputComponent()
            .setCustomId('input3')
            .setLabel(conf.WhiteList.Question3.Label)
            .setPlaceholder(conf.WhiteList.Question3.Placeholder)
            .setStyle(conf.WhiteList.Question3.Style)
            .setRequired(true),
            new TextInputComponent()
            .setCustomId('input4')
            .setLabel(conf.WhiteList.Question4.Label)
            .setPlaceholder(conf.WhiteList.Question4.Placeholder)
            .setStyle(conf.WhiteList.Question4.Style)
            .setRequired(true),
            new TextInputComponent()
            .setCustomId('input5')
            .setLabel(conf.WhiteList.Question5.Label)
            .setPlaceholder(conf.WhiteList.Question5.Placeholder)
            .setStyle(conf.WhiteList.Question5.Style) //'SHORT' or 'LONG'
            .setRequired(true)
            )
            if (!interaction.isButton()) return
            if (interaction.customId == "requestChanEmbed"){
                showModal(reqModal, {
                    client: client,
                    interaction: interaction
                }
            )   
        }

        const admin = '<@'+interaction.user.id+'>'
        const nickname = String(client.db.get(interaction.channel.id))
        
        if (interaction.customId == "addPlayer"){
            if(interaction.member.permissions.has(PermissionsBitField.Flags.Administrator) || interaction.member.roles.cache.has(client.db.get(conf.guildId))){
                var cmd = conf.WhiteList.addCommand.replaceAll('$user',nickname)
                sendCmd(cmd)
                console.log('\x1b[1m\x1b[33m'+time+' \x1b[37m| \x1b[32mINFO \x1b[37m| \x1b[36m–ò–≥—Ä–æ–∫ \x1b[33m'+nickname+' \x1b[36m–±—ã–ª –¥–æ–±–∞–≤–ª–µ–Ω –≤ –≤–∞–π—Ç–ª–∏—Å—Ç!\x1b[0m')
                interaction.reply({
                    content: '**–ó–∞—è–≤–∫–∞ –æ–¥–æ–±—Ä–µ–Ω–∞ –∞–¥–º–∏–Ω–æ–º '+admin+' –∏ –∏–≥—Ä–æ–∫ "'+nickname+'" —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –≤–∞–π—Ç–ª–∏—Å—Ç!**'
                })
            }
            else{
                interaction.reply({
                    content: '**–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –¥–∞–Ω–Ω–æ–π –∫–Ω–æ–ø–∫–∏!**',
                    ephemeral: true
                })
            }
        }

        if (interaction.customId == "removePlayer"){
            if(interaction.member.permissions.has(PermissionsBitField.Flags.Administrator) || interaction.member.roles.cache.has(client.db.get(conf.guildId))){
                var cmd = conf.WhiteList.remCommand.replaceAll('$user',nickname)
                sendCmd(cmd)
                console.log('\x1b[1m\x1b[33m'+time+' \x1b[37m| \x1b[32mINFO \x1b[37m| \x1b[36m–ò–≥—Ä–æ–∫ \x1b[33m'+nickname+' \x1b[36m–±—ã–ª —É–¥–∞–ª—ë–Ω –∏–∑ –≤–∞–π—Ç–ª–∏—Å—Ç–∞!\x1b[0m')
                interaction.reply({
                    content: '**–ó–∞—è–≤–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞ '+admin+' –∏ –∏–≥—Ä–æ–∫ "'+nickname+'" —É–¥–∞–ª—ë–Ω –∏–∑ –≤ –≤–∞–π—Ç–ª–∏—Å—Ç–∞!**',
                })
            }
            else{
                interaction.reply({
                    content: '**–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –¥–∞–Ω–Ω–æ–π –∫–Ω–æ–ø–∫–∏!**',
                    ephemeral: true
                })
            }
        }
        if (interaction.customId == "deleteChan"){
            const embed = new EmbedBuilder()
                .setColor('#00bd6d')
                .setAuthor({
                    name: '–£–¥–∞–ª–µ–Ω–∏–µ –ó–∞—è–≤–∫–∏'
                })
                .setDescription('**–í—ã —Ç–æ—á–Ω–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –∑–∞—è–≤–∫—É? –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ –æ—Ç–º–µ–Ω–∏—Ç—å!**')
                .setThumbnail(conf.thumbImage)
                .setFooter({
                    text: conf.footerText
                })
            const row = new ActionRowBuilder()
            .addComponents(
                new ButtonBuilder()
                .setCustomId('not')
                .setLabel('–æ—Ç–º–µ–Ω–∏—Ç—å')
                .setEmoji('üíö')
                .setStyle(ButtonStyle.Success),
                new ButtonBuilder()
                .setCustomId('yes')
                .setLabel('—É–¥–∞–ª–∏—Ç—å')
                .setEmoji('‚ù§Ô∏è')
                .setStyle(ButtonStyle.Danger),
            )
            interaction.reply({
                embeds: [embed],
                components: [row]
            })
        }
        if (interaction.customId == "not"){
            const embed = new EmbedBuilder()
            .setColor('#00bd6d')
            .setAuthor({
                name: '–£–¥–∞–ª–µ–Ω–∏–µ –ó–∞—è–≤–∫–∏'
            })
            .setDescription('**–£–¥–∞–ª–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ!**')
            .setThumbnail(conf.thumbImage)
            .setFooter({
                text: conf.footerText
            })
            interaction.reply({
                embeds: [embed]
            })
        }
        if (interaction.customId == "yes"){
            const embed = new EmbedBuilder()
            .setColor('#00bd6d')
            .setAuthor({
                name: '–£–¥–∞–ª–µ–Ω–∏–µ –ó–∞—è–≤–∫–∏'
            })
            .setDescription('**–ó–∞—è–≤–∫–∞ –±—É–¥–µ—Ç —É–¥–∞–ª–µ–Ω–∞ —á–µ—Ä–µ–∑ 10 —Å–µ–∫—É–Ω–¥! –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ –æ—Ç–º–µ–Ω–∏—Ç—å!**')
            .setThumbnail(conf.thumbImage)
            .setFooter({
                text: conf.footerText
            })
            interaction.reply({
                embeds: [embed]
            })
            setTimeout(() => {
                const delChan = client.channels.cache.get(interaction.channel.id)
                delChan.delete().catch((e)=>{console.log('\x1b[1m\x1b[33m'+time+' \x1b[37m| \x1b[31mERROR \x1b[37m| \x1b[36m–ü—Ä–æ–∏–∑–æ—à–ª–∞ –û—à–∏–±–∫–∞ > \x1b[31m'+e+'\x1b[0m')})
                client.db.delete(interaction.channel.id)
            }, 10000)
        }
    }
}